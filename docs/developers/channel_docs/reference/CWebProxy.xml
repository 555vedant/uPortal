<?xml version="1.0"?>

  <!--
  <!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd" >
  -->

  <!--
   Author:   Andrew Draskoy
   Filename: CWebProxy.xml
   Creation: Mon Jul 23 13:36:17 PDT 2001
   Revision: $Revision$ 
   Language: XML 1.0 (DocBook XML DTD v4.1.2)
   Purpose:  Documents the CWebProxy channel class for uPortal 2.x
   $Id$
   -->

<article status="draft" class="techreport">
  <articleinfo>
    <author>
      <firstname>Andrew</firstname>
      <surname>Draskoy</surname>
      <affiliation>
     <orgname>Memorial University of Newfoundland</orgname>
          <orgdiv>Computing and Communications</orgdiv>
      </affiliation>
    </author>
    <author>
      <firstname>Sarah</firstname>
      <surname>Arnott</surname>
      <affiliation>
     <orgname>Memorial University of Newfoundland</orgname>
          <orgdiv>Computing and Communications</orgdiv>
      </affiliation>
    </author>
    

     <date>September 21, 2000</date>

     <title>CWebProxy
     </title>

  <!--
     <revhistory>
        <revision>
           <revnumber>0.1</revnumber>
           <date>September 21, 2000</date>
           <revremark>Baselined</revremark>
        </revision>
     </revhistory>
   -->
  </articleinfo>

  <sect1>
    <title>Purpose</title>
    
    <para>CWebProxy allows incorporation of web-based services as channels.  It provides mechanisms
     for connecting to and rendering HTML and XML services.  Pages are refreshed when they change.
     For applications under http, GET and POST parameters are passed through the portal to the 
     application.  This allows communcation between the browser and the back-end application.  
     Cookies are are kept within CWebProxy, allowing dynamic http applications to maintain
     state.
    </para>

  </sect1>

  <sect1>
    <title>Summary</title>
    
    <para>The key mechanism is <emphasis>pass-through</emphasis>.  It is the means for
    <emphasis>passing</emphasis> request parameters <emphasis>through</emphasis> the portal
    to the application. There are currently four levels of pass-through supported:
    </para>
    
    <itemizedlist mark="bullet">
       <listitem>
          <para>Use <quote>application</quote> if you want references to the original <parameter class='command'>cw_xml</parameter>
           to stay in the channel, and other links to go outside the portal framework. 
          </para>
       </listitem>
       <listitem>
          <para>Use <quote>all</quote> if you want all links generated by the first URL to stay in the channel.
          </para>
       </listitem>
       <listitem>
          <para>Use <quote>marked</quote> if you want to indicate precisely which links should stay
          in channel, and which should replace the framework
          </para>
       </listitem>
       <listitem>
          <para>Use <quote>none</quote> if you're not interested in having any of the links stay in-channel. 
          </para>
       </listitem>       
    </itemizedlist>
    
    <para>Note that it is possible to change the pass-through type at any point, so if a link is
    followed that would best be served by another pass-though type, it is a trivial matter to 
    change it at that time.
    </para>
    
  </sect1>

  <sect1>
    <title>Static Data and Runtime Data</title>
    
    <para>With the exception of <parameter class='command'>cw_reset</parameter>, which is a runtime 
     parameter only, parameters are identical for both static and runtime data. The channel state 
     variables are initially set 
     acccording to static data, or defaults.  Runtime data modifies the equivalent channel state
     variables. All parameters are then passed through to the stylesheets based on the current
     state.  The parameters are:
    </para>
    
    <itemizedlist mark="bullet">
       <listitem>
          <para><parameter>cw_xml</parameter>: a URI representing the source XML or HTML document.
          </para>
       </listitem>
       <listitem>
          <para><parameter>cw_ssl</parameter>: a URI representing the corresponding .ssl (stylesheet list) file.
          </para>
       </listitem>       
       <listitem>
          <para><parameter>cw_xslTitle</parameter>: a title representing the stylesheet (optional). 
          If no title parameter is specified, a default stylesheet will be chosen according to the media.
          </para>
       </listitem>
       <listitem>
          <para><parameter>cw_xsl</parameter>:  a URI representing the stylesheet to use. If 
          <parameter>cw_xsl</parameter> is supplied, <parameter>cw_ssl</parameter> and 
          <parameter>cw_xslTitle</parameter> will be ignored.
          </para>
       </listitem>       
        <listitem>
          <para><parameter>cw_info</parameter>: a URI to be called for the <emphasis>info</emphasis>
           event.
          </para>
       </listitem> 
       <listitem>
          <para><parameter>cw_help</parameter>: a URI to be called for the <emphasis>help</emphasis>
           event.
          </para>
       </listitem>
       <listitem>
          <para><parameter>cw_edit</parameter>: a URI to be called for the <emphasis>edit</emphasis>
           event.
          </para>
       </listitem> 
       <listitem>
          <para><parameter>cw_tidy</parameter>: if set to <emphasis>on</emphasis>, filter the 
          source document through JTidy, converting HTML to XHTML.
          </para>
       </listitem>
       <listitem>
          <para><parameter>cw_passThrough</parameter>: indicates that runtime data is to be passed
           through. If <emphasis>passThrough</emphasis> is supplied, and not set to 
           <quote>none</quote>, additional runtime data parameters and values will be passed as
           request parameters to the <emphasis>cw_xml</emphasis>. 
           <parameter>cw_passThrough</parameter> values:
           
               <itemizedlist mark="opencircle">
                  <listitem>
                     <para><parameter>none</parameter>: (default).  Don't do anything.
                     </para>
                  </listitem>
                  <listitem>
                     <para><parameter>marked</parameter>: If runtime data includes 
                     <parameter>cw_inChannelLink</parameter>, pass through other runtime data as
	                 request parameters. Use in conjunction with a stylesheet that marks appropriate
		             links with <parameter>cw_inChannelLink</parameter> as a request parameter, and replaces the URI with
		             baseActionURL, possibly with <parameter>cw_xml</parameter> and maybe other 
		             parameters.
                     </para>
                  </listitem>
                  <listitem>
                     <para><parameter>all</parameter>: This parameter instructs the render routine to 
                     pass through all additional runtime data as http request parameters to xmlURI.
		             Intended to support XHTML dynamic pages.  With JTidy hooked in, can support HTML
		             as well.  Use in conjunction with a style sheet that re-routes all links through
		             the portal.
                     </para>
                  </listitem>
                  <listitem>
                     <para><parameter>application</parameter>: The same as <parameter>all</parameter>.
                      Use in conjunction with a style sheet that re-routes links for that application
		              through the portal.
                     </para>
                  </listitem>                  
               </itemizedlist>
          </para>     
       </listitem>          
       <listitem>
          <para><parameter>cw_reset</parameter> An instruction to reset internal variables.
                The value <emphasis>return</emphasis> resets <parameter>cw_xml</parameter>
                to its last value before changed by button events.  The
                value <parameter>reset</parameter> returns all variables to the static data
                values.  (reset not impl. yet.)  Runtime data parameter only.
          </para>
       </listitem>
                                                   
    </itemizedlist>

    <para>
    Note: parameter names have changed from the previous version of CWebProxy. <parameter>cw_xsl
    </parameter> and <parameter>cw_xslTitle</parameter> are there for compatibility with CGenericXSLT
     and might go away.
    </para>
    
    <sect2>
       <title>Portal Events</title>
       
       <para>CWebProxy supports the button events for <emphasis>help</emphasis>, <emphasis>about
       </emphasis>, and <emphasis>edit</emphasis>.  A channel instance can specify URIs for any 
       of these via static or runtime data.  A button event will then redirect the channel to the
       appropriate URI.  Note that separate stylesheets for button event URIs are not supported.
       The URI should return control to the original application via <parameter>cw_reset</parameter>
       <parameter class="option">=return</parameter>.

       </para>
    </sect2>
           
    <sect2>
       <title>Stylesheets</title>
       
       <para>These stylesheets are set up for typical dynamic applications.  You may need to make
        modifications to suit particular applications.
       </para>
       
       <sect3>
          <title>xhtml.xsl</title>
          <para>For use with XHTML or HTML applications.
          </para>
          
          <para>The base URI is determined from <parameter>cw_xml</parameter>, or from the href element of the 
          <sgmltag role="xml" class="emptytag">base</sgmltag> tag, if one exists in the document head.  Note that this is
          different from the baseActionURL, which is a URI referring to the channel via the portal.
          </para>
          
          <para><sgmltag role="xml" class="starttag">script</sgmltag> elements are copied from both
          <sgmltag role="xml" class="starttag">head</sgmltag> and <sgmltag role="xml" class="starttag">body</sgmltag>.
          </para>
          
          <para>Children of <sgmltag role="xml" class="starttag">body</sgmltag> are copied as is, save for the following special
           processing:

               <itemizedlist mark="bullet">
                  <listitem>
                     <para><sgmltag role="xml" class="starttag">form</sgmltag>  If the <emphasis>action</emphasis>
                     attribute is a relative URL, the absolute URL is found using the <parameter>cw_xml
                     </parameter> parameter.  Its value is then modified according to the value of 
                     <parameter>cw_passThrough</parameter>:
                     
                        <itemizedlist mark="opencircle">
                           <listitem>   
                              <para><parameter class="option">none</parameter> (default): href is as is unless it is a relative URL,
	                          in which case it is prepended with the base URI.
                              </para>
                           </listitem>
                           <listitem>   
                              <para><parameter class="option">marked</parameter>: if the href contains a query string parameter
	                          named <parameter class="option">cw_inChannelLink</parameter>, the href is replaced with baseActionURL concatenated with the original querystring.  The value of
	                          <parameter>cw_inChannelLink</parameter> is ignored.
                              </para>
                           </listitem>
                           <listitem>
                              <para><parameter class="option">application</parameter>: if either the action attribute 
                              is empty or the <parameter>cw_xml</parameter> parameter is equivalent to the 
                              absolute URL of the action attribute, the action attribute is set to the baseActionURL.
                              </para>
                           </listitem>
                           <listitem>
                              <para><parameter class="option">application</parameter>: if either the action attribute
                              is empty or the <parameter>cw_xml</parameter> parameter is equivalent to 
                              action attribute or <parameter>cw_xml</parameter> equals the base URI of 
                              the action attribute, the action attribute is set to the baseActionURL.
                              </para>
                           </listitem>
                           <listitem>
                              <para><parameter class="option">all</parameter>: The action attribute is set to the baseActionURL.
                              If either the action attribute is empty or the <parameter>cw_xml</parameter> 
                              parameter is equivalent to action attribute or the <parameter>cw_xml</parameter>
                              equals the base URI of the action attribute, nothing else is done.  Otherwise
	                          a <parameter>cw_xml</parameter> parameter is added to aim the channel at the new URI specified in the 
	                          <parameter>action</parameter> attribute.
                              </para>
                           </listitem>                          
                        </itemizedlist>
                     
                     </para>
                  </listitem>
                  <listitem>
                     <para><sgmltag role="xml" class="starttag">a</sgmltag> If the <emphasis>href</emphasis>
                     attribute is a relative URL, the absolute URL is found using the <parameter>cw_xml</parameter>
                     parameter.  Its value is then modified according to the value of <parameter>cw_passThrough</parameter>:
                     
                        <itemizedlist mark="opencircle">
                           <listitem>   
                              <para><parameter>none</parameter> (default): href is as is unless it is a relative
                               URL, in which case it is prepended with the base URI.
                              </para>
                           </listitem>
                           <listitem>   
                              <para><parameter>marked</parameter>: if the href contains a query string parameter named 
                              <parameter>cw_inChannelLink</parameter>, the href is replaced with baseActionURL
                              concatenated with the original querystring.  The value of cw_inChannelLink is 
                              ignored.
                              </para>
                           </listitem>
                            <listitem>   
                              <para><parameter>application</parameter>: if either the href attribute 
                              is empty or the <parameter>cw_xml</parameter> parameter is equivalent to
                              the absolute URL of the href attribute, the href is set to the baseActionURL.
                              </para>                              
                           </listitem>
                           <listitem>
                              <para><parameter>all</parameter>: The href is set to the baseActionURL.
	                          If either the href attribute is empty or the <parameter>cw_xml</parameter>
	                          parameter is equivalent to the href attribute or cw_xml equals the base URI of the
	                          href attribute, nothing more is done.  Otherwise, a <parameter>cw_xml</parameter>
	                          parameter is added with a value equivalent to that of the original href.
	                          </para>
                           </listitem>       
                        </itemizedlist>                     
                     
                     </para>
                  </listitem>
                  <listitem>
                      <para><sgmltag role="xml" class="starttag">img</sgmltag> if the <parameter>src</parameter>
                      attribute is relative, it is prepended with the base URI.
	                   </para>
                  </listitem>
               </itemizedlist>               
          </para>
                                    
       </sect3>
       <sect3>
          <title>rss2html_full.xsl</title>
          <para>For use with RSS applications.
          </para>
          
          <para>Added support for <sgmltag role="html" class="starttag">textinput</sgmltag>,
          changing <sgmltag role="html" class="starttag">link</sgmltag> behaviour there
          and in <sgmltag role="html" class="starttag">item</sgmltag>.  We add the semantic
          that empty links refer back to <parameter>cw_xml</parameter>.
          </para>
          
          <para>Other links must start with http:// or ftp:// as specified by RSS.  
          The static data should set <parameter class="command">passThrough</parameter>
          to <parameter class="option">all</parameter>.
          </para>
                           
       </sect3>
              
    </sect2>
    <sect2>
       <title>Session Support</title>
       <para>Support is provided for cookies as specified in the original Netscape specification,
        as well as RFC 2109 and RFC 2965.  Only the <parameter>Cookie</parameter>,
       <parameter>Cookie2</parameter>, <parameter>Set-Cookie</parameter>, and 
       <parameter>Set-Cookie2</parameter> headers are currently processed.
       </para>
       
       <para>Cookies are not maintained between portal logins.  Once you logout of
       the portal, your cookies are discarded.
       </para>
       
       <para>Applications maintaining sessions via URL rewriting in http query strings
       should also work.  Other forms of URL rewriting to maintain state probably will
       not work.  Most applications use cookies by preference if available, which they are.
       </para>
  
    </sect2>
    <sect2>
       <title>Issues and Limitations</title> 
       <para>HTML and XHTML <sgmltag role="html" class="starttag">body</sgmltag> background colours and images are not
       reflected in the output.  This would require access to the <sgmltag role="html" class="starttag">td</sgmltag>
       element generated by the portal to contain the channel output.
       </para>    
       
       <para>
       URLs that use frames cannot be incorporated as channels.
       </para>   
       
       <para>
       If cw_tidy is off (default), the source document cannot specify a doctype.
       </para>
       
       <para>
       The source document cannot use xml namespaces.
       </para>
       
       <para>
       Suppression of JTidy diagnostic output has not been tested on non-UNIX platforms.
       </para>
       
       <para>
       The <parameter class="command">cw_reset</parameter>=<parameter class="option">reset</parameter> runtime command is not implemented yet.
       </para>
       
       <para>If a button event (and maybe a change to cw_xml) points you to a non-existent URL,
       there is no way to return.  An exception needs to be thrown in this case, so that the 
       channel can be restarted. Ideally there'd be a reset button alongside help, edit, etc., to
       trigger a portal event that could be caught by the channel.
       </para>
       
       <para>The if cw_xml is changed before cw_reset=return is called, your are returned
       to the last cw_xml used, not necessarily the one that was in use before a button event.
       </para>
       
       <para>For security reasons, it might be a good idea to have a static data parameter
        which specifies limitations on what can be changed via runtime commands.
       </para>

       <para>There is currently a bug in the Portal framework which causes a spurious
       <parameter class="command">action</parameter> parameter to be handed to the channel
        if it was reset or restarted from the error channel.
       </para>
       
       <sect3>
          <title>Scripts</title>
          <para>Limited support is provided for included scripts, but they may not work
          exactly as they would when viewed directly. XHTML 1.0 states that an XHTML document 
          must be valid xml so if embedded javascript code contains <literal>&lt;</literal>, 
          <literal>&amp;</literal>, <literal>]]&gt;</literal> or <literal>--</literal>,
          it must be wrapped in a CDATA section element. however, cdata sections are 
          recognized by xml processors but not browsers. w3c states that external scripts 
          should be used if your script uses those character sequences. CWebProxy supports 
          embedded javascript containing these characters only if it is wrapped in a CDATA 
          section element and sent through tidy. Note that the output will not be valid xml,
          and thus not valid XHTML.
          </para>
       </sect3>
       
    </sect2> 
    <sect2>
       <title>Future Directions</title>
       
       <para>We plan to further examine all the issues addresses in the previous section.
       </para>       
          
    </sect2>
    <sect2>
       <title>Recent Changes</title>
       
       <para>
       
       <itemizedlist>
          <listitem>   
             <para>
              June 29, 2001.  Documentation update.  
             </para>
          </listitem>
          <listitem>   
             <para>
             June 28, 2001.  Enhanced "marked" pass-though:  Added ability to distinguish
             between links equivalent to cw_xml and others, and support for connecting to 
             non-cw_xml links.
             </para>
          </listitem>
          <listitem>
             <para>June 22, 2001.  Improved cookie support.
             </para>
          </listitem>
          <listitem>
             <para>June 22, 2001.  Added support for cw_passThrough="application".  It's semantics
              are the same as "all" used to be.  cw_passThrough="all" now sends <emphasis>all</emphasis>
              links through the portal.  This is handled entirely in the XHTML stylesheet.  The CWebProxy java code treats "all"
	          and "application" identically.
             </para>
          </listitem>
          <listitem>
             <para>June 22, 2001.  Added another Tomcat example.
             </para>
          </listitem>
          <listitem>
             <para>June 22, 2001.  Added support for pre-parsing paths containing "../". Tomcat
              and Internet Explorer were not always handling these correctly, necessitating
              rewriting, as done by Netscape.
              </para>
          </listitem>
       </itemizedlist>                    
                           
       </para>       
          
    </sect2>


    <sect2>
       <title>Examples</title>
       
       <para>
       The unmodified Tomcat numguess.jsp and servlet examples are now set up as
       examples. See the numguess help and servlet help.  These examples are available 
       under the Subscription Channel, and can be seen in the <emphasis>Tests</emphasis> 
       tab of the demo user.
       </para>
       
       <para>
       A theoretical example:  Imagine an application that consists of a tree of web pages.
       The first page is a static XHTML page containing a few links. Some of these should
       remain in the channel, others should leave the portal framework.  This page should
       use <parameter>cw_passThrough="marked"</parameter>.  Since it is the initial page of
       the application, we would indicate this in the static data defining the channel.  Links
       that need to stay in the channel should have <parameter>"?cw_inChannelLink=1"</parameter>
       appended to them.  (We will assume the use of the XHTML stylesheets provided with CWebProxy.)
       </para> 
       
       <para>
        Let's look at possibilities for some of these marked links.  Perhaps one points to a set
        of specially designed static pages that avoid outside links.  They are all designed to
        fit in the channel.  We can set <command>cw_passThrough="all"</command> to make writing
        the pages easier.  So when linking to this page from the top-level page, we'd have something
        like:
           <parameter>a href="second.html?cw_inChannelLink=1cw_passThrough=all"</parameter>

       </para>
       
       <para>
       Another second-level page might actually be an application implemented by a CGI or via JSP,
       PHP, or whatever.  Let's assume that this one generates HTML (as opposed to XHTML), and also
       generates a few links to outside web pages, which we don't want to incorporate into the portal.  The link to this
       this application should set the pass-through type to <emphasis>application</emphasis>. It 
       should also set
       <parameter>cw_tidy="on"</parameter> to convert the HTML to XHTML.
       </para>
       
    </sect2>
    
 </sect1>


</article>
