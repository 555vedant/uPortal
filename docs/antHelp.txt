Introduction:

This file, antHelp.txt, provides some default help text for the uPortal ant build.  
The build.xml is configured to print this file by default in the case where no other specific target is specified.

Other help with our build file:

Type "ant -projecthelp" to see a list of ant targets and the descriptions of those targets as recorded directly in the build.xml file.

Running the targets:

Your run the targets by specifying the specific target to the GUI in which you are running Ant (Eclipse is highly recommended)
or by invoking ant with the name of the desired task as the first argument.

For example,

ant compile

Available targets:

"help" - the target that prints this file

"initportal" - the target that will deploy uPortal and load your database,
but you must first set up the JDBC properties in
rdbm.properties and possibly PersonDirs.xml,
both of which are in the properties directory.

The "initportal" target runs all the targets necessary to deploy the portal
  and prepare the portal database: deploy, db, i18n-db, pubchan, pubfragments.

Do not run this task against a database the contents of which you care about, as it initializes the database.

"all" - The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.
  
"clean"- The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

"compile" - The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

"deploy" - The "deploy" target copies the contents of the build directory into a
  location required by our servlet container, and picks up any external
  dependencies along the way.  After restarting the servlet container, you
  can now test your web application.

"dist" - The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created

"javadoc" - The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Javadocs are build in this way and included in
  distribution releases.  Developers making local changes may also wish to run this task
  to document local versions of the uPortal framework.

"prepare" - The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

"db" --
  The "db" target runs uPortal's DbLoader program to load the database.
  WARNING: THIS MAY ERASE EXISTING uPORTAL TABLES!!!

  The "db" target accepts command line arguments which override values
  read from the dbloader.xml file:

  The "db" target can be invoked thusly:

  To use /properties/db/mytables.xml instead of the tables file specified in
  dbloader.xml:

  ant db -Dusetable=-t -Dtablefile=/properties/db/mytables.xml

  To use /properties/db/mydata.xml instead of the data file specified in
  dbloader.xml:

  ant db -Dusedata=-d -Ddatafile=/properties/db/mydata.xml

  Note: the tables and data files can both be overridden by combining the
  arguments.  The usetable and tablefile must be used in tandem and
  sequentially on the command line. Similarly, usedata and datafile must but
  used in tandem.

  Addtionally, several other boolean flags may be overridden.

  To set createScript=true
  ant db -Dcreatescript=-c

  To set createScript=false
  ant db -Dcreatescript=-nc

  To set dropTables=true
  ant db -Ddroptables=-D

  To set dropTables=false
  ant db -Ddroptables=-nD

  To set createTables=true
  ant db -Dcreatetables=-C

  To set createTables=false
  ant db -Dcreatetables=-nC

  To set populateTables=true
  ant db -Dpopulatetables=-P

  To set populateTables=false
  ant db -Dpopulatetables=-nP

  The -c, -nc, -D, -nD, -C, -nC, -P, -nP arguements may all be used
  independantly or in any combination although it would not make sense to,
  for example, use both -c and -nc.

"i18n-db" - The "i18n-db" target loads internationalization tables and data.

"l10n-db" - The "l10n-db" target loads localization database settings.

"dbunload" - The "dbunload" target runs uPortal's DbUnload program to dump a database table.
  to run this target, you must specify the table name and output file parameters
  on the command line.
  For example:

  ant dbunload -Dtablename=up_channel -Dxmlfile=-

"dbtest" - The "dbtest" target runs uPortal's DbTest program to display information
  about the database defined in rdbm.properties

"pubfragments" - The "pubfragments" target loads fragments from XML files into the database.

"md5passwd" -  The "md5passwd" target runs uPortal's md5passwd program to create an entry for
  a user in the UP_PERSON_DIR table. To run this target, you must specify
  the username parameter in the command line.  For example:

  ant md5passwd -Dusername=ken


"deluser" - The "deluser" target runs uPortal's DeleteUser program to delete all
   traces of a uportal user from the uPortal database.
   Examples:
   ant deluser -Duser=username
   ant deluser -Duser=ashenoy

"regchantype" - The "regchantype" target runs uPortal's RegisterChannelType program to
  create an entry for a new generic channel in the UP_CHAN_TYPE table.
  To run this target, you must specify the class, name, description, and
  uri parameters in the command line.  For example:

  ant regchantype
    -Dclass=org.jasig.portal.channels.CImage
    -Dname="Image Channel"
    -Ddescription="Displays image with optional title and subtitle"
    -Duri=/org/jasig/portal/channels/CImage/CImage.cpd


"addstylesheet" 
  The "addstylesheet" target runs uPortal's RegisterStylesheet program to
  add core framework stylesheets used to create structures and themes.

  Example:

  ant addstylesheet
    -DstylesheetType=-t
    -DstylesheetUri=/org/jasig/portal/layout/tab-column/nested-tables/nested-tables.xsl
    -DdescriptionUri=/org/jasig/portal/layout/tab-column/nested-tables/nested-tables.sdf

  where -s = specify structure stylesheet
        -t = specify theme stylesheet


"modstylesheet" - 
  The "modstylesheet" target runs uPortal's RegisterStylesheet program to
  update core framework stylesheets used to create structures and themes.

  Example:

  ant modstylesheet
    -DstylesheetType=-s
    -DstylesheetUri=/org/jasig/portal/layout/tab-column/tab-column.xsl
    -DdescriptionUri=/org/jasig/portal/layout/tab-column/tab-column.sdf
    -DstylesheetId=1

  where -s = specify structure stylesheet
        -t = specify theme stylesheet


"delstylesheet" - 
  The "delstylesheet" target runs uPortal's RegisterStylesheet program to
  delete core framework stylesheets used to create structures and themes.

  Example:

  ant delstylesheet -DstylesheetType=-t -DstylesheetId=1

  where -s = specify structure stylesheet
        -t = specify theme stylesheet


"compiletests" - the "compiletests" target compiles the JUnit tests.

"runtests" - the "runtests" target runs the JUnit tests in the tests/ tree.  It uses the 
  batchtest task to inspect the tree to find all test implementations.

"swingtests" - the "swingtests" target runs the unit tests with the Swing UI.

"RunXSLT" - the "RunXSLT" target performs an XSL transform using uPortal XML libraries.

For example:

 ant RunXSLT -DXmlInput=UP_SEQUENCE_20.XML -DoutputFile=NEW_UP_SEQUENCE.XML -DXslfile=UP_SEQUENCE.xsl

 where XmlInput is the file to be transformed,
 outputFile is where the result should saved and
 Xslfile is the URL(!) of the xsl file to be used in the transform.

"pubchan" - 
  The "pubchan" target runs the ChannelPublisher tool.
  Channel definitions are defined in XML files.  Each
  channel definition is published or modified if one
  already existed with the same functional name.  You
  can publish all the channel definitions at once or just
  one at a time.
  Examples:
  ant pubchan -Dchannel=all
  ant pubchan -Dchannel=daily-business-cartoon.xml

"deployPortletApp" - 
  The "deployPortletApp" target runs the portlet Deployer tool.
  This tool takes a portlet WAR file, rewrites the web.xml file
  and deploys the results to the servlet container.  You can deploy
  multiple portlets at once by placing them in the lib/portlets
  directory and specifying "all" as the porletApp.
  Examples:
  ant deployPortletApp -DportletApp=all
  ant deployPortletApp -DportletApp=C:/TEMP/myPortlet.war



CVS Metadata about this file:

$Revision$ $Date$
