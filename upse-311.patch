diff --git a/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletAdministrationHelper.java b/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletAdministrationHelper.java
index 58a61dbe0..f8bf27a56 100644
--- a/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletAdministrationHelper.java
+++ b/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletAdministrationHelper.java
@@ -177,7 +177,7 @@ public final class PortletAdministrationHelper implements ServletContextAware {
      *     category and principal if no definition is found
      */
     public PortletDefinitionForm createPortletDefinitionForm(IPerson person, String portletId) {
-
+        logger.error("in createPortletDefinitionForm");
         IPortletDefinition def = portletDefinitionRegistry.getPortletDefinition(portletId);
 
         // create the new form
@@ -294,6 +294,8 @@ public final class PortletAdministrationHelper implements ServletContextAware {
     public PortletDefinitionForm savePortletRegistration(
             IPerson publisher, PortletDefinitionForm form) {
         logger.trace("In savePortletRegistration() - for: {}", form.getPortletName());
+        logger.error("form stopDate [" + form.getStopDate() + "]");
+        logger.error("form stopImmediately [" + form.getStopImmediately() + "]");
         /* TODO:  Service-Layer Security Reboot (great need of refactoring with a community-approved plan in place) */
 
         // User must have the selected lifecycle permission over AT LEAST ONE
diff --git a/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletDefinitionForm.java b/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletDefinitionForm.java
index 5e40c6521..a70257e04 100644
--- a/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletDefinitionForm.java
+++ b/uPortal-portlets/src/main/java/org/apereo/portal/portlets/portletadmin/PortletDefinitionForm.java
@@ -16,6 +16,7 @@ package org.apereo.portal.portlets.portletadmin;
 
 import java.io.Serializable;
 import java.text.ParseException;
+import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
@@ -88,6 +89,14 @@ public class PortletDefinitionForm implements Serializable {
     private int expirationAmPm = 0;
     private String customMaintenanceMessage;
 
+    /** Maintenance Scheduler information */
+    private boolean stopImmediately;
+    private String stopDate;
+    private String stopTime;
+    private boolean restartManually;
+    private String restartDate;
+    private String restartTime;
+
     /** Portlet controls */
     private boolean editable;
 
@@ -123,6 +132,12 @@ public class PortletDefinitionForm implements Serializable {
 
     /** Construct a new PortletDefinitionForm from a PortletDefinition */
     public PortletDefinitionForm(IPortletDefinition def) {
+        logger.error("In PortletDefinitionForm");
+        StackTraceElement[] abc = Thread.currentThread().getStackTrace();
+        Arrays.stream(abc).forEach(e -> log.error(e));
+        logger.error("stopImmediately [" + this.stopImmediately + "]");
+        logger.error("restartManually [" + this.restartManually + "]");
+        logger.error("parameters [" + def.getParameters() + "]");
         this.setId(def.getPortletDefinitionId().getStringId());
         this.setFname(def.getFName());
         this.setName(def.getName());
@@ -615,6 +630,54 @@ public class PortletDefinitionForm implements Serializable {
         this.customMaintenanceMessage = customMaintenanceMessage;
     }
 
+    public boolean getStopImmediately() {
+        return stopImmediately;
+    }
+
+    public void setStopImmediately(boolean stopImmediately) {
+        this.stopImmediately = stopImmediately;
+    }
+
+    public String getStopDate() {
+        return stopDate;
+    }
+
+    public void setStopDate(String stopDate) {
+        this.stopDate = stopDate;
+    }
+
+    public String getStopTime() {
+        return stopTime;
+    }
+
+    public void setStopTime(String stopTime) {
+        this.stopTime = stopTime;
+    }
+
+    public boolean getRestartManually() {
+        return restartManually;
+    }
+
+    public void setRestartManually(boolean restartManually) {
+        this.restartManually = restartManually;
+    }
+
+    public String getRestartDate() {
+        return restartDate;
+    }
+
+    public void setRestartDate(String restartDate) {
+        this.restartDate = restartDate;
+    }
+
+    public String getRestartTime() {
+        return restartTime;
+    }
+
+    public void setRestartTime(String restartTime) {
+        this.restartTime = restartTime;
+    }
+
     /**
      * Return the full date and time at which this portlet shoudl be automatically published. This
      * value is built from the individual date/time fields.
diff --git a/uPortal-webapp/src/main/webapp/WEB-INF/flows/edit-portlet/portletConfig.jsp b/uPortal-webapp/src/main/webapp/WEB-INF/flows/edit-portlet/portletConfig.jsp
index 1e28166b7..a8fadd98e 100644
--- a/uPortal-webapp/src/main/webapp/WEB-INF/flows/edit-portlet/portletConfig.jsp
+++ b/uPortal-webapp/src/main/webapp/WEB-INF/flows/edit-portlet/portletConfig.jsp
@@ -586,6 +586,28 @@ PORTLET DEVELOPMENT STANDARDS AND GUIDELINES
                                     <td>
                                         <spring:message code="lifecycle.description.${ lifecycleState }"/>
                                     </td>
+                                    <td>
+                                        <c:if test="${lifecycleState == 'MAINTENANCE'}">
+                                            <div id="maintenance-scheduler">
+                                                <div>
+                                                    <label for="stopImmediately">Stop Immediately</label>
+                                                    <form:checkbox path="stopImmediately" id="stopImmediately" checked="checked" />
+                                                    <label for="stopDate">Stop Date</label>
+                                                    <form:input type="text" path="stopDate" id="stopDate" disabled="true" />
+                                                    <label for="stopTime">Stop Time</label>
+                                                    <form:input type="text" path="stopTime" id="stopTime" disabled="true" />
+                                                </div>
+                                                <div>
+                                                    <label for="restartManually">Restart Manually</label>
+                                                    <form:checkbox path="restartManually" id="restartManually" checked="checked" />
+                                                    <label for="restartDate">Restart Date</label>
+                                                    <form:input type="text" path="restartDate" id="restartDate" disabled="true" />
+                                                    <label for="restartTime">Restart Time</label>
+                                                    <form:input type="text" path="restartTime" id="restartTime" disabled="true" />
+                                                </div>
+                                            </div>
+                                        </c:if>
+                                    </td>
                                 </tr>
                             </c:forEach>
                             </tbody>
@@ -1001,6 +1023,59 @@ PORTLET DEVELOPMENT STANDARDS AND GUIDELINES
         });
     });
 
+    // maintenance scheduler rendering
+    up.jQuery(function($) {
+        const maintenanceSchedulerDiv = "#maintenance-scheduler";
+        const stopImmediatelyFieldName = "#stopImmediately";
+        const stopDateFieldName = "#stopDate";
+        const stopTimeFieldName = "#stopTime";
+        const restartManuallyFieldName = "#restartManually";
+        const restartDateFieldName = "#restartDate";
+        const restartTimeFieldName = "#restartTime";
+
+        const changeFieldState = (fieldName, fieldState) => $(fieldName).prop("disabled", fieldState);
+
+        const resetStopImmediately = isChecked => {
+            changeFieldState(stopDateFieldName, isChecked);
+            changeFieldState(stopTimeFieldName, isChecked);
+			if (isChecked) {
+				$(stopDateFieldName).val('');
+				$(stopTimeFieldName).val('');
+			}
+		}
+        const resetRestartManually = isChecked => {
+            changeFieldState(restartDateFieldName, isChecked);
+            changeFieldState(restartTimeFieldName, isChecked);
+            if (isChecked) {
+                $(restartDateFieldName).val('');
+                $(restartTimeFieldName).val('');
+            }
+        }
+
+        $('.lifecycle-state').click(function() {
+            if ($('#lifecycle-MAINTENANCE').is(":checked")) {
+                $(maintenanceSchedulerDiv).show();
+                return;
+			}
+			$(maintenanceSchedulerDiv).hide();
+			$(stopImmediatelyFieldName).prop("checked", true);
+			resetStopImmediately(true);
+			$(restartManuallyFieldName).prop("checked", true);
+			resetRestartManually(true);
+        });
+
+        $(stopImmediatelyFieldName).click(function() {
+            resetStopImmediately($(stopImmediatelyFieldName).is(':checked'));
+        })
+
+        $(restartManuallyFieldName).click(function() {
+            resetRestartManually($(restartManuallyFieldName).is(':checked'));
+        });
+
+        if (!$('#lifecycle-MAINTENANCE').is(":checked")) {
+            $(maintenanceSchedulerDiv).hide();
+        }
+    })(up.jQuery);
 
     up.jQuery(function () {
         var $ = up.jQuery;
