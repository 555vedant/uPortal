<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<!--
 | NOTICE:  This file represents a contractual API that is leveraged by more 
 | than one caller.  Please do not refactor this file in a way that changes 
 | the number or nature of arguments expected.
 |
 | These are:
 |   - ${Attributes.NODE}=XML Element that defines the entity to import
 |   - ${PORTAL_CONTEXT}=uPortal's Spring ApplicationContext
 |   - ${SqlAttributes.DATA_SOURCE}=the DataSource for the PortalDb
 |   - ${SqlAttributes.TRANSACTION_MANAGER}=PlatformTransactionManager in use
 |   - Settings defined in classpath://properties/db/entities/import.properties
 |
 +-->
<with-attribute key="USER_NAME" value="${valueOf(@username)}">
    <sql-transaction>
        <with-attribute key="NEXT_ID" value="${org.jasig.portal.io.SequenceGeneratorPhrase(UP_USER)}">
            <!-- user -->
            <sql-upsert>
                <update-statement>UPDATE up_user SET user_dflt_usr_id = ? WHERE user_name = ?</update-statement>
                <insert-statement>INSERT INTO up_user(user_id, user_dflt_usr_id, user_name, user_dflt_lay_id) VALUES(${NEXT_ID}, ?, ?, 1)</insert-statement>
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = '${org.jasig.portal.io.DefaultUsernamePhrase(${singleNode(default-user)})}')}"/>
                <parameter value="${USER_NAME}"/>
            </sql-upsert>

            <!-- user profile(s) -->
            <sql-statement sql="DELETE FROM up_user_profile WHERE user_id = ?">
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = '${USER_NAME}')}"/>
            </sql-statement>
            <sequence>
                <node-iterator xpath="profile">
                    <with-attribute key="USER_ID" value="${sql(SELECT user_id FROM up_user WHERE user_name = '${USER_NAME}')}">
                        <with-attribute key="PROFILE_ID" value="${sequence()}">
                            <sql-statement sql="INSERT INTO up_user_profile(user_id, profile_id, profile_fname, profile_name, description, layout_id, structure_ss_id, theme_ss_id) VALUES(?, ?, ?, ?, ?, 0, ?, ?)">
                                <parameter value="${USER_ID}"/>
                                <parameter value="${PROFILE_ID}"/>
                                <parameter value="${valueOf(@fname)}"/>
                                <parameter value="${valueOf(@name)}"/>
                                <parameter value="${valueOf(description)}"/>
                                <parameter value="${sql(SELECT ss_id FROM up_ss_struct WHERE ss_name = '${valueOf(structure/@name)}')}"/>
                                <parameter value="${sql(SELECT ss_id FROM up_ss_theme WHERE ss_name = '${valueOf(theme/@name)}')}"/>
                            </sql-statement>
                            <!-- User (Profile) Parameters:  structure... -->
                            <node-iterator xpath="structure/parameter">
                                <sql-upsert>
                                    <update-statement>UPDATE up_ss_user_parm SET param_val = ? WHERE user_id = ? AND profile_id = ? AND ss_id = ? AND ss_type = 1 AND param_name = ?</update-statement>
                                    <insert-statement>INSERT INTO up_ss_user_parm(param_val, user_id, profile_id, ss_id, ss_type, param_name) values(?, ?, ?, ?, 1, ?)</insert-statement>
                                    <parameter value="${valueOf(value)}"/>
                                    <parameter value="${USER_ID}"/>
                                    <parameter value="${PROFILE_ID}"/>
                                    <parameter value="${sql(SELECT ss_id FROM up_ss_struct WHERE ss_name = '${valueOf(../@name)}')}"/>
                                    <parameter value="${valueOf(name)}"/>
                                </sql-upsert>
                            </node-iterator>
                            <!-- User (Profile) Parameters:  theme... -->
                            <node-iterator xpath="theme/parameter">
                                <sql-upsert sql="">
                                    <update-statement>UPDATE up_ss_user_parm SET param_val = ? WHERE user_id = ? AND profile_id = ? AND ss_id = ? AND ss_type = 2 AND param_name = ?</update-statement>
                                    <insert-statement>INSERT INTO up_ss_user_parm(param_val, user_id, profile_id, ss_id, ss_type, param_name) values(?, ?, ?, ?, 2, ?)</insert-statement>
                                    <parameter value="${valueOf(value)}"/>
                                    <parameter value="${USER_ID}"/>
                                    <parameter value="${PROFILE_ID}"/>
                                    <parameter value="${sql(SELECT ss_id FROM up_ss_theme WHERE ss_name = '${valueOf(../@name)}')}"/>
                                    <parameter value="${valueOf(name)}"/>
                                </sql-upsert>
                            </node-iterator>
                        </with-attribute>
                    </with-attribute>
                </node-iterator>
            </sequence>
        </with-attribute>
    </sql-transaction>
</with-attribute>